import streamlit as st
import requests


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏ Langflow
def query_langflow_model(message):
    api_key = "sk-z9pNBz1c36vVMv5ZnkwgjJJ3GbKXqMCiMlnKGUE6vHI"
    url = "http://localhost:7860/api/v1/run/51437b11-074d-4b87-bfbd-487b4a302d6f"  # The complete API endpoint URL for this flow
    # Request payload configuration
    payload = {
        "output_type": "chat",
        "input_type": "chat",
        "input_value": message
    }
    # Request headers
    headers = {
        "Content-Type": "application/json",
        "x-api-key": api_key  # Authentication key from environment variable
    }
    # Send API request
    response = requests.request("POST", url, json=payload, headers=headers)
    response.raise_for_status()  # Raise exception for bad status codes
    data = response.json()
    return data["outputs"][0]["outputs"][0]["artifacts"]["message"]


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Tatlin Assistant",
    page_icon="ü§ñ",
    layout="centered"
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ CSS –¥–ª—è —Ç—ë–º–Ω–æ–π —Ç–µ–º—ã
st.markdown("""
<style>
    /* –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ */
    .stApp {
        background-color: #0e0e0e;
        color: #ffffff;
    }
    .main-title {
        font-size: 1.8rem !important;
        color: #ffffff !important;
        text-align: center;
        margin-bottom: 1rem;
    }
    .welcome-card {
        background: #1a1a1a;
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: 0 2px 4px rgba(255, 255, 255, 0.05);
        margin: 0 auto;
        max-width: 500px;
        border: 1px solid #2a2a2a;
    }
    .styled-button {
        background-color: #6200ee !important;
        color: white !important;
        border: none !important;
        border-radius: 20px !important;
        padding: 10px 24px !important;
        font-size: 0.9rem !important;
        transition: all 0.3s !important;
    }
    .styled-button:hover {
        background-color: #3700b3 !important;
        transform: scale(1.02);
    }
    .back-button {
        background-color: #333 !important;
    }
    .avatar-large {
        font-size: 2.5rem;
        text-align: center;
        margin-bottom: 0.5rem;
        color: #ffffff;
    }
    .footer {
        text-align: center;
        margin-top: 2rem;
        padding: 1rem;
        font-size: 0.8rem;
        color: #aaa;
    }
    .divider {
        height: 1px;
        background: linear-gradient(to right, transparent, #444, transparent);
        margin: 1rem 0;
    }
    /* –°—Ç–∏–ª–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.7);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }
    .modal-content {
        background-color: #1a1a1a;
        padding: 2rem;
        border-radius: 12px;
        max-width: 500px;
        width: 80%;
        border: 1px solid #2a2a2a;
        text-align: center;
    }
    /* –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã */
    .stTextInput>div>div>input {
        background-color: #1a1a1a !important;
        color: white !important;
        border: 1px solid #444 !important;
        padding: 8px 12px !important;
    }
    /* –ê–Ω–∏–º–∞—Ü–∏–∏ */
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }
    .fade-in {
        animation: fadeIn 0.3s ease-out;
    }
    /* –°—Ç–∏–ª–∏ –¥–ª—è —á–∞—Ç–∞ */
    .chat-container {
        max-height: 60vh;
        overflow-y: auto;
        padding: 1rem;
        margin-bottom: 1rem;
        border-radius: 12px;
        background-color: #1a1a1a;
        border: 1px solid #2a2a2a;
    }
</style>
""", unsafe_allow_html=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–µ—Å—Å–∏–∏
if 'submitted' not in st.session_state:
    st.session_state.submitted = False
if 'show_support' not in st.session_state:
    st.session_state.show_support = False
if "messages" not in st.session_state:
    st.session_state.messages = []


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
def support_modal():
    if st.session_state.show_support:
        st.markdown("""
        <div class="modal-overlay">
            <div class="modal-content fade-in">
                <h3>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</h3>
                <div style="margin: 1.5rem 0;">
                    <p style="font-size: 1.1rem; margin-bottom: 0.5rem;">solution_team@datatech.ru</p>
                    <p style="font-size: 1.1rem;">+7 (495) 123-45-67</p>
                </div>
                <button onclick="window.parent.document.querySelector('section.main').firstElementChild.click()" 
                        style="background-color: #6200ee; color: white; border: none; border-radius: 20px; padding: 10px 24px; cursor: pointer; margin-top: 1rem;">
                    –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
                </button>
            </div>
        </div>
        """, unsafe_allow_html=True)


# –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
main_container = st.container()

with main_container:
    support_modal()  # –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ

    if not st.session_state.show_support:
        if not st.session_state.submitted:
            # –§–æ—Ä–º–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞
            st.markdown('<div class="avatar-large">üëã</div>', unsafe_allow_html=True)
            st.markdown('<h1 class="main-title">Tatlin Assistant</h1>', unsafe_allow_html=True)

            with st.container():
                with st.form("intro_form"):
                    user_name = st.text_input("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?", placeholder="–í–∞—à–µ –∏–º—è...")

                    submitted = st.form_submit_button(
                        "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Üí",
                        use_container_width=True,
                        type="primary"
                    )

                    if submitted:
                        if user_name:
                            st.session_state.submitted = True
                            st.session_state.user_name = user_name
                            st.rerun()
                        else:
                            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è")

        elif st.session_state.submitted:
            # –ß–∞—Ç-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            st.markdown(f'<h1 class="main-title">–ß–∞—Ç —Å Tatlin Assistant</h1>', unsafe_allow_html=True)

            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —á–∞—Ç–∞
            chat_container = st.container()

            with chat_container:
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                if len(st.session_state.messages) == 0:
                    st.session_state.messages.append({
                        "role": "assistant",
                        "content": f"–ü—Ä–∏–≤–µ—Ç, {st.session_state.user_name}! –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?"
                    })

                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
                for message in st.session_state.messages:
                    with st.chat_message(message["role"]):
                        st.markdown(message["content"])

            # –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            st.markdown('<div class="chat-input-container">', unsafe_allow_html=True)
            prompt = st.chat_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            st.markdown('</div>', unsafe_allow_html=True)
            if prompt:
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
                st.session_state.messages.append({"role": "user", "content": prompt})

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏ Langflow
                response = query_langflow_model(prompt)

                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
                st.session_state.messages.append({"role": "assistant", "content": response})

                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                st.rerun()

            # –ö–Ω–æ–ø–∫–∞ "–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è"
            if st.button(
                    "–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è ‚Ü©Ô∏è",
                    use_container_width=True,
                    key="back_to_start"
            ):
                st.session_state.submitted = False
                st.session_state.messages = []
                st.rerun()



